{"version":3,"sources":["constants.js","reducers/initialState.js","reducers/index.js","reducers/todo.js","components/Loader/Loader.js","components/CinemaRow/CinemaRow.js","actions/actionCreator.js","components/CinemaRow/CinemaRowContainer.js","components/InfoPanel/InfoPanel.js","components/InfoPanel/InfoPanelContainer.js","components/BookingTicketField/BookingTicketField.js","components/BookingTicketField/BookingTicketFieldContainer.js","components/MovieItemContainer/MovieItem.js","components/MovieItemContainer/MovieItemContainer.js","components/Main/Main.js","components/Main/MainContainer.js","containers/MovieList/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","SET_LIST_OF_FILMS","SET_MOVIE_SESSIONS","SET_REQUEST_FIELD_VALUE","CHANGING_GENRE_IN_SELECT","START_LOADING","FINISH_LOADING","BOOKING_TICKET","FINISH_BOOKING","PREPARE_FOR_BOOKING_TICKET","CURRENT_PLACE","SHOW_INFO","REMOVE_INFO","initialState","moviesList","name","id","requestField","chosenGenre","error","isLoading","sessionsList","movieId","isBookingTicket","addInfForBooking","chosenPlaceId","row_id","place_position","isInfo","info","rootReducer","combineReducers","todo","state","arguments","length","undefined","action","type","Object","objectSpread","LoaderOne","react_default","a","createElement","className","Loader","size","active","inverted","CinemaRow","_this$props","this","props","columns","index","prepForBookTick","currentPlace","style","position","map","item","isFree","_id","key","data-row","data-place-position","data-id","onClick","event","Component","setListOfFilms","setListOfsessions","getSessionsOfMovie","dispatch","getState","startLoading","target","dataset","window","location","hash","concat","addInf","find","fetch","then","response","text","JSON","parse","setTimeout","finishLoading","startBookingTicket","finishBooking","currentPlaceNum","row","placePosition","buyTicket","_getState$todo","method","body","stringify","movieShow_id","showInfo","status","removeInfo","CinemaRowContainer","connect","InfoPanel","BookingTicketField","price","ticketPrice","startTime","Date","ho","String","getHours","padStart","mi","getMinutes","dd","getDate","mm","getMonth","yyyy","getFullYear","places","Fragment","src","pictureLink","alt","title","description","i","CinemaRow_CinemaRowContainer","InfoPanelContainer","BookingTicketFieldContainer","MovieItem","dateOfRelease","release","data-movie-id","hidden","BookingTicketField_BookingTicketFieldContainer","MovieItemContainer","Main","getListOfFilms","getMoviesSessions","setRequestFieldValue","handleChangeOfGenre","handleRequest","placeholder","value","onChange","MovieItemContainer_MovieItemContainer","genre_id","Loader_Loader","MainContainer","movieList","MoviesList","Main_MainContainer","store","createStore","applyMiddleware","thunk","App","es","MovieList_MoviesList","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e32256f.chunk.js","sourcesContent":["export const ACTIONS = {\r\n  SET_LIST_OF_FILMS: 'set_list_of_films',\r\n  SET_MOVIE_SESSIONS: 'set_movies_sessions',\r\n  SET_REQUEST_FIELD_VALUE: 'set_request_field_value',\r\n  CHANGING_GENRE_IN_SELECT: 'changing_genre_in_select',\r\n  START_LOADING: 'start_loading',\r\n  FINISH_LOADING: 'finish_loading',\r\n  BOOKING_TICKET: 'booking_ticket',\r\n  FINISH_BOOKING: 'finish_booking',\r\n  PREPARE_FOR_BOOKING_TICKET: 'prepare_for_booking_ticket',\r\n  CURRENT_PLACE: 'current_place',\r\n  SHOW_INFO: 'show_info',\r\n  REMOVE_INFO: 'remove_info'\r\n};","export const initialState = {\r\n  moviesList: [{name: 'oh, there\\'s nothing here :(', id:`1a`}],\r\n  requestField: '',\r\n  chosenGenre: -1,\r\n  error: false,\r\n  isLoading: false,\r\n  sessionsList: [],\r\n  movieId: null,\r\n  isBookingTicket: false,\r\n  addInfForBooking: null,\r\n  chosenPlaceId: null,\r\n  row_id: null,\r\n  place_position: null,\r\n  isInfo: false,\r\n  info: null\r\n};","import { combineReducers } from \"redux\";\r\nimport { todo } from './todo';\r\n\r\nexport const rootReducer = combineReducers({todo});","import { ACTIONS } from '../constants';\r\nimport {initialState} from './initialState';\r\n\r\nexport function todo(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.SET_LIST_OF_FILMS:\r\n      return {\r\n        ...state,\r\n        moviesList: action.moviesList,\r\n        requestField: ''\r\n      };\r\n    case ACTIONS.SET_MOVIE_SESSIONS:\r\n      return {\r\n        ...state,\r\n        sessionsList: action.sessionsList\r\n      };\r\n    case ACTIONS.SET_REQUEST_FIELD_VALUE:\r\n      return {\r\n        ...state,\r\n        requestField: action.requestField\r\n      };\r\n    case ACTIONS.CHANGING_GENRE_IN_SELECT:\r\n      return {\r\n        ...state,\r\n        chosenGenre: action.chosenGenre\r\n      };\r\n    case ACTIONS.BOOKING_TICKET:\r\n      return {\r\n        ...state,\r\n        sessionsList: action.sessionsList,\r\n        movieId: action.movieId,\r\n        addInfForBooking: action.addInfForBooking,\r\n        isBookingTicket: true\r\n      };\r\n    case ACTIONS.START_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case ACTIONS.FINISH_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: false\r\n      };\r\n    case ACTIONS.FINISH_BOOKING:\r\n      return {\r\n        ...state,\r\n        isBookingTicket: false\r\n      };\r\n    case ACTIONS.PREPARE_FOR_BOOKING_TICKET:\r\n      return {\r\n        ...state\r\n      };\r\n    case ACTIONS.CURRENT_PLACE:\r\n      return {\r\n        ...state,\r\n        chosenPlaceId: action.chosenPlaceId\r\n      };\r\n    case ACTIONS.SHOW_INFO:\r\n      return {\r\n        ...state,\r\n        isInfo: true,\r\n        info: action.info\r\n      };\r\n    case ACTIONS.REMOVE_INFO:\r\n      return {\r\n        ...state,\r\n        isInfo: false,\r\n        sessionsList: [],\r\n        movieId: null,\r\n        isBookingTicket: false,\r\n        addInfForBooking: null,\r\n        chosenPlaceId: null,\r\n        row_id: null,\r\n        place_position: null,\r\n        info: null\r\n      };\r\n    default:\r\n      return {\r\n        ...state\r\n      }\r\n  }\r\n}","import React from 'react'\r\nimport { Loader } from 'semantic-ui-react';\r\nimport './LoaderStyles.css';\r\n\r\nconst LoaderOne = () => (\r\n  <div className=\"loaderWrap\">\r\n      <Loader size='massive' active inverted/>\r\n  </div>\r\n);\r\n\r\nexport default LoaderOne;","import React, {Component} from 'react';\r\n\r\nimport './CinemaRowStyles.css';\r\n\r\nclass CinemaRow extends Component {\r\n  render() {\r\n    const {columns, index, prepForBookTick, currentPlace} = this.props;\r\n    return (\r\n        <li style={{position: 'relative'}}>\r\n          <span className=\"rowNumericField\">Row {index}</span>\r\n          <ul className=\"cinemaRow\">\r\n            {columns.map((item) => {\r\n              let isFree = item.isFree;\r\n              let className = 'onePlace';\r\n              if (!isFree) {\r\n                className = 'onePlace notFree'\r\n              } else {\r\n                if (currentPlace === item._id) {\r\n                  className += ' chosenPlace'\r\n                }\r\n              }\r\n              return <li className={className}\r\n                         key={item._id}\r\n                         data-row={index}\r\n                         data-place-position={item.position}\r\n                         data-id={item._id}\r\n                         onClick={(event) => {\r\n                           if (isFree) { return prepForBookTick(event)}\r\n                         }}\r\n              >{item.position}</li>\r\n            })}\r\n          </ul>\r\n        </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CinemaRow;","import { ACTIONS } from '../constants';\r\n\r\nexport const getListOfFilms = () => {\r\n  return (dispatch) => {\r\n    dispatch(startLoading());\r\n    let movieList = [];\r\n    window.location.hash = `movies`;\r\n    fetch('https://cinema-api-test.herokuapp.com/movies')\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(response => {\r\n        movieList = JSON.parse(response);\r\n        setTimeout(() => dispatch(finishLoading()), 1100);\r\n        dispatch(setListOfFilms(movieList));\r\n      });\r\n  }\r\n};\r\n\r\nconst setListOfFilms = (moviesList) => {\r\n  if (moviesList.length === 0) {\r\n    moviesList = [{name: 'oh, there\\'s nothing here :(', id:`1a`}];\r\n  }\r\n  return {\r\n    type: ACTIONS.SET_LIST_OF_FILMS,\r\n    moviesList,\r\n    requestField: ''\r\n  }\r\n};\r\n\r\nexport const getMoviesSessions = () => {\r\n  return dispatch => {\r\n    let sessionsList = [];\r\n    fetch('https://cinema-api-test.herokuapp.com/movieShows')\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(response => {\r\n        sessionsList = JSON.parse(response);\r\n        dispatch(setListOfsessions(sessionsList));\r\n      });\r\n  }\r\n};\r\n\r\nconst setListOfsessions = (sessionsList) => {\r\n  return {\r\n    type: ACTIONS.SET_MOVIE_SESSIONS,\r\n    sessionsList\r\n  }\r\n};\r\n\r\nexport const setRequestFieldValue = (event) => {\r\n  let requestField = event.target.value;\r\n  return {\r\n    type: ACTIONS.SET_REQUEST_FIELD_VALUE,\r\n    requestField\r\n  }\r\n};\r\n\r\nexport const handleChangeOfGenre = (event) => {\r\n  let chosenGenre = event.target.value;\r\n  return {\r\n    type: ACTIONS.CHANGING_GENRE_IN_SELECT,\r\n    chosenGenre\r\n  }\r\n};\r\n\r\n//Handling user's request with information about name or\\and genre\r\nexport const handleRequest = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch(startLoading());\r\n    let chosenGenre = getState().todo.chosenGenre;\r\n    let requestField = getState().todo.requestField;\r\n\r\n\r\n    if (chosenGenre < 0 && requestField.length <= 0) {\r\n      let movieList = [];\r\n      window.location.hash = `movies`;\r\n      fetch('https://cinema-api-test.herokuapp.com/movies')\r\n        .then(response => {\r\n          return response.text()\r\n        })\r\n        .then(response => {\r\n          movieList = JSON.parse(response);\r\n          setTimeout(() => dispatch(finishLoading()), 1100);\r\n          dispatch(setListOfFilms(movieList));\r\n        });\r\n    } else {\r\n      if (chosenGenre >= 0 && requestField.length <= 0) {\r\n        window.location.hash = `movies/find?name&genres=${chosenGenre}`;\r\n        let movieList = [];\r\n        fetch(`https://cinema-api-test.herokuapp.com/movies/find?name&genres=${chosenGenre}`)\r\n          .then(response => {\r\n            return response.text()\r\n          })\r\n          .then(response => {\r\n            movieList = JSON.parse(response);\r\n            setTimeout(() => dispatch(finishLoading()), 1100);\r\n            dispatch(setListOfFilms(movieList));\r\n          });\r\n      }\r\n      if (chosenGenre < 0 && requestField.length > 0) {\r\n        window.location.hash = `movies/find?name=${requestField}&genres`;\r\n        let movieList = [];\r\n        fetch(`https://cinema-api-test.herokuapp.com/movies/find?name=${requestField}&genres`)\r\n          .then(response => {\r\n            return response.text()\r\n          })\r\n          .then(response => {\r\n            movieList = JSON.parse(response);\r\n            setTimeout(() => dispatch(finishLoading()), 1100);\r\n            dispatch(setListOfFilms(movieList));\r\n          });\r\n      }\r\n      if (chosenGenre >= 0 && requestField.length > 0) {\r\n        window.location.hash = `movies/find?name=${requestField}&genres=${chosenGenre}`;\r\n        let movieList = [];\r\n        fetch(`https://cinema-api-test.herokuapp.com/movies/find?name=${requestField}&genres=${chosenGenre}`)\r\n          .then(response => {\r\n            return response.text()\r\n          })\r\n          .then(response => {\r\n            movieList = JSON.parse(response);\r\n            setTimeout(() => dispatch(finishLoading()), 1100);\r\n            dispatch(setListOfFilms(movieList));\r\n          });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const getSessionsOfMovie = (event) => {\r\n  return (dispatch, getState) => {\r\n    dispatch(startLoading());\r\n    let movieId = event.target.dataset.movieId;\r\n    window.location.hash = `movieShows?movie_id=${movieId}`;\r\n    let addInf = getState().todo.moviesList.find(item => item._id === movieId);\r\n    let sessionsList = [];\r\n    fetch(`https://cinema-api-test.herokuapp.com/movieShows?movie_id=${movieId}`)\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(response => {\r\n        sessionsList = JSON.parse(response);\r\n        setTimeout(() => dispatch(finishLoading()), 1100);\r\n        dispatch(startBookingTicket(sessionsList, movieId, addInf));\r\n      });\r\n  }\r\n};\r\n\r\nconst startBookingTicket = (sessionsList, movieId, addInfForBooking) => {\r\n  return{\r\n    type: ACTIONS.BOOKING_TICKET,\r\n    sessionsList,\r\n    movieId,\r\n    addInfForBooking\r\n  }\r\n};\r\n\r\nconst startLoading = () => {\r\n  return {\r\n    type: ACTIONS.START_LOADING\r\n  }\r\n};\r\n\r\nconst finishLoading = () => {\r\n  return {\r\n    type: ACTIONS.FINISH_LOADING\r\n  }\r\n};\r\n\r\nexport const finishBooking = () => {\r\n  return {\r\n    type: ACTIONS.FINISH_BOOKING\r\n  }\r\n};\r\n\r\nexport const prepForBookTick = (event) => {\r\n  return (dispatch, getState) => {\r\n    let currentPlaceNum = event.target.dataset.id;\r\n    let row = event.target.dataset.row;\r\n    let place_position = event.target.dataset.placePosition;\r\n    dispatch(currentPlace(currentPlaceNum, row, place_position));\r\n  }\r\n};\r\n\r\nconst currentPlace = (currentPlaceNum, row_id, place_position) => {\r\n  return {\r\n    type: ACTIONS.CURRENT_PLACE,\r\n    chosenPlaceId: currentPlaceNum,\r\n    row_id: row_id,\r\n    place_position: place_position\r\n  }\r\n};\r\n\r\nexport const buyTicket = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch(startLoading());\r\n    window.location.hash = `bookingPlace`;\r\n    const {movieId,\r\n      row_id,\r\n      place_position} = getState().todo;\r\n    fetch('https://cinema-api-test.herokuapp.com/bookingPlace', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        movieShow_id : movieId,\r\n        row_id,\r\n        place_position,\r\n        isFree: false\r\n      }),\r\n    })\r\n      .then(response => {\r\n        setTimeout(() => dispatch(finishLoading()), 1100);\r\n        setTimeout(() => dispatch(showInfo(response.status)),1000);\r\n      })\r\n  }\r\n};\r\n\r\nexport const showInfo = (info) => {\r\n  return {\r\n    type: ACTIONS.SHOW_INFO,\r\n    info: info\r\n  }\r\n};\r\n\r\nexport const removeInfo = () => {\r\n  window.location.hash = `movies`;\r\n  return {\r\n    type: ACTIONS.REMOVE_INFO\r\n  }\r\n};","import {connect} from 'react-redux';\r\n\r\nimport CinemaRow from \"./CinemaRow\";\r\n\r\nimport {prepForBookTick} from '../../actions/actionCreator';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentPlace: state.todo.chosenPlaceId\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    prepForBookTick: (event) => dispatch(prepForBookTick(event))\r\n  };\r\n}\r\n\r\n\r\nconst CinemaRowContainer = connect(mapStateToProps, mapDispatchToProps)(CinemaRow);\r\n\r\nexport default CinemaRowContainer;","import React, {Component} from 'react';\r\n\r\nimport './InfoPanelStyles.css';\r\n\r\nclass InfoPanel extends Component {\r\n  render() {\r\n    const {info, removeInfo} = this.props;\r\n    return (\r\n      <div className=\"backgroundInfopanel\">\r\n        <div className=\"infoPanel\">\r\n          <p>Code: {info}</p>\r\n          <span className=\"removeInfo\" onClick={() => removeInfo()}>ok</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoPanel;","import {connect} from 'react-redux';\r\n\r\nimport InfoPanel from \"./InfoPanel\";\r\n\r\nimport {removeInfo} from '../../actions/actionCreator';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    info: state.todo.info\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    removeInfo: () => dispatch(removeInfo())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoPanel);","import React, {Component} from 'react';\r\n\r\nimport './BookingTicketFieldStyles.css';\r\n\r\nimport CinemaRowContainer from '../CinemaRow/CinemaRowContainer';\r\nimport InfoPanelContainer from \"../InfoPanel/InfoPanelContainer\";\r\n\r\nclass BookingTicketField extends Component {\r\n  render() {\r\n    const {\r\n      addInfForBooking,\r\n      sessionsList,\r\n      finishBooking,\r\n      buyTicket,\r\n      isInfo} = this.props;\r\n    let price = sessionsList.ticketPrice;\r\n    let startTime = new Date(sessionsList.startTime);\r\n    let ho = String(startTime.getHours()).padStart(2, '0');\r\n    let mi = String(startTime.getMinutes()).padStart(2, '0');\r\n    let dd = String(startTime.getDate()).padStart(2, '0') ;\r\n    let mm = String(startTime.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    let yyyy = startTime.getFullYear();\r\n    let places = sessionsList.places;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"backgroundForBookingField\">\r\n          <div className=\"bookingField\">\r\n            <div className=\"bookingFieldMovieContainer\">\r\n              <span className=\"close\" onClick={() => {finishBooking()}}>Delete</span>\r\n              <section className=\"bookingFieldDetails\">\r\n                <div className=\"filmPosterContainer\">\r\n                  <img src={addInfForBooking.pictureLink}\r\n                       alt={addInfForBooking.name}\r\n                       title={addInfForBooking.name}/>\r\n                </div>\r\n                <ul className=\"bookingDescriptionList\">\r\n                  <li className=\"bookingMovieName\">{addInfForBooking.name}</li>\r\n                  <li className=\"screeningDate\">Film starts at {ho}:{mi}({dd}-{mm}-{yyyy})</li>\r\n                  <li className=\"bookingDescriptionTitle\">\"{addInfForBooking.description}\"</li>\r\n                  <li className=\"bookingTicketPrice\">One ticket costs: {price/10}$</li>\r\n                </ul>\r\n              </section>\r\n              <section className=\"hallFieldContainer\">\r\n                <div className=\"screenContainer\">\r\n                  <p>Screen</p>\r\n                </div>\r\n                <ul className=\"listOfPlaces\">\r\n                  {places.map((item, i) => {\r\n                    return <CinemaRowContainer key={i} columns={item} index={i}/>\r\n                  })}\r\n                </ul>\r\n                <span className=\"buyTicket\" onClick={() => buyTicket()}>Buy ticket</span>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {isInfo && <InfoPanelContainer/>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookingTicketField;","import {connect} from 'react-redux';\r\n\r\nimport BookingTicketField from \"./BookingTicketField\";\r\n\r\nimport {finishBooking, buyTicket} from '../../actions/actionCreator';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    addInfForBooking: state.todo.addInfForBooking,\r\n    sessionsList: state.todo.sessionsList,\r\n    isInfo: state.todo.isInfo\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    finishBooking: () => dispatch(finishBooking()),\r\n    buyTicket: () => dispatch(buyTicket())\r\n  };\r\n}\r\n\r\n\r\nconst BookingTicketFieldContainer = connect(mapStateToProps, mapDispatchToProps)(BookingTicketField);\r\n\r\nexport default BookingTicketFieldContainer;","import React, {Component} from 'react';\r\nimport './MovieItemStyles.css';\r\n\r\nimport BookingTicketFieldContainer from \"../BookingTicketField/BookingTicketFieldContainer\";\r\n\r\nclass MovieItem extends Component {\r\n  render() {\r\n    const {\r\n      name,\r\n      pictureLink,\r\n      dateOfRelease,\r\n      description,\r\n      movieId,\r\n      getSessionsOfMovie,\r\n      isBookingTicket} = this.props;\r\n    let release =  new Date(dateOfRelease);\r\n    let dd = String(release.getDate()).padStart(2, '0') ;\r\n    let mm = String(release.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    let yyyy = release.getFullYear();\r\n    return (\r\n      <React.Fragment>\r\n        <li className=\"listItemContainer\" data-movie-id={movieId}>\r\n          <div className=\"filmsPosterContainer\" hidden={!dateOfRelease} onClick={(event) => getSessionsOfMovie(event)}>\r\n            <img src={pictureLink} alt={name} title={name} data-movie-id={movieId}/>\r\n          </div>\r\n          <ul className=\"descriptionList\">\r\n            <li className=\"movieName\"\r\n                onClick={(event) => getSessionsOfMovie(event)}\r\n                data-movie-id={movieId}>{name}</li>\r\n            <li className=\"movieRelease\">{!!dateOfRelease && `Release: ${dd}-${mm}-${yyyy}`}</li>\r\n            <li className=\"descriptionTitle\">{!!dateOfRelease && description}</li>\r\n          </ul>\r\n        </li>\r\n        {isBookingTicket && <BookingTicketFieldContainer/>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieItem;","import {connect} from 'react-redux';\r\nimport MovieItem from \"./MovieItem\";\r\n\r\nimport {getSessionsOfMovie} from '../../actions/actionCreator';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isBookingTicket: state.todo.isBookingTicket\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getSessionsOfMovie: (event) => dispatch(getSessionsOfMovie(event))\r\n  };\r\n}\r\n\r\n\r\nconst MovieItemContainer = connect( mapStateToProps, mapDispatchToProps)(MovieItem);\r\n\r\nexport default MovieItemContainer;","import React, {Component} from 'react';\r\nimport './MainStyles.css';\r\nimport Loader from \"../Loader/Loader\";\r\nimport MovieItemContainer from \"../MovieItemContainer/MovieItemContainer\";\r\n\r\nclass Main extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.getListOfFilms();\r\n    this.props.getMoviesSessions();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      moviesList,\r\n      requestField,\r\n      setRequestFieldValue,\r\n      handleChangeOfGenre,\r\n      handleRequest,\r\n      isLoading} = this.props;\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <header className=\"mainHeader\">\r\n          <div className=\"mainHeader_wrap\">\r\n            <h2>Schedule</h2>\r\n          </div>\r\n        </header>\r\n\r\n        <main>\r\n          <div className=\"mainWrap\">\r\n            <ul className=\"listOfTools\">\r\n              <li className=\"listItemOfSearch\"><input type=\"text\"\r\n                                                      placeholder=\"Find a movie\"\r\n                                                      className=\"searchField\"\r\n                                                      value={requestField}\r\n                                                      onChange={(event) => setRequestFieldValue(event)}/></li>\r\n              <li className=\"listItemSelect\">\r\n                <select className=\"chosingGenere\" onChange={(event) => handleChangeOfGenre(event)}>\r\n                  <option value={-1}>GENRES</option>\r\n                  <option value={0}>ACTION</option>\r\n                  <option value={1}>ADVENTURES</option>\r\n                  <option value={2}>COMEDY</option>\r\n                  <option value={3}>DRAMA</option>\r\n                  <option value={4}>HORROR</option>\r\n                  <option value={5}>WESTERNS</option>\r\n                </select>\r\n              </li>\r\n              <li className=\"listItemButton\"><input type=\"button\"\r\n                                                    value='Show films'\r\n                                                    onClick={() => handleRequest()}\r\n              /></li>\r\n            </ul>\r\n            <ul className=\"listOfMovies\">\r\n              {moviesList.map((item) => {\r\n                return <MovieItemContainer\r\n                  key={item._id}\r\n                  name={item.name}\r\n                  pictureLink={item.pictureLink}\r\n                  dateOfRelease={item.dateOfRelease}\r\n                  description={item.description}\r\n                  genre_id={item.genre_id}\r\n                  movieId={item._id}\r\n                />\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </main>\r\n        {isLoading && <Loader/>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import { connect } from \"react-redux\";\r\nimport Main from \"./Main\";\r\nimport {\r\n  getListOfFilms,\r\n  getMoviesSessions,\r\n  setRequestFieldValue,\r\n  handleChangeOfGenre,\r\n  handleRequest} from '../../actions/actionCreator';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    moviesList: state.todo.moviesList,\r\n    requestField: state.todo.requestField,\r\n    isLoading: state.todo.isLoading\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getListOfFilms: () => dispatch(getListOfFilms()),\r\n    getMoviesSessions: () => dispatch(getMoviesSessions()),\r\n    setRequestFieldValue: (event) => dispatch(setRequestFieldValue(event)),\r\n    handleChangeOfGenre: (event) => dispatch(handleChangeOfGenre(event)),\r\n    handleRequest: () => dispatch(handleRequest())\r\n  }\r\n};\r\n\r\nconst MainContainer = connect(mapStateToProps, mapDispatchToProps)(Main);\r\n\r\nexport default MainContainer;","import React from 'react';\r\nimport './MoviesListSyles.css';\r\nimport MainContainer from \"../../components/Main/MainContainer\";\r\n\r\nconst MoviesList = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <MainContainer/>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MoviesList;","import React from 'react';\nimport './App.css';\nimport {rootReducer} from './reducers/index';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from \"redux-thunk\";\n\nimport MoviesList from \"./containers/MovieList/MoviesList\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MoviesList/>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}